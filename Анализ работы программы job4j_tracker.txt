1)По Диспетчеру задач Windows:
программа занимает ~64-65МБ.
2)Jconsole
HeapMemoryUsage: колеблется в диапазоне 5-25МБ. 
Пилообразный график. Медленно растёт до 20-25, потом резко падает до 5МБ.
При бездействии(не выбираем никаких пуктов в меню) - память(HeapMemoryUsage) медленно растёт.
Видимо, по умолчанию, Java "немного течёт".
при этом массовое добавление заявок не вызвало какого-то резкого роста HeapMemoryUsage, а вот отображение(1. Show all items.) - да.

2.1)Резкий рост/падение потребления памяти от команды 1. Show all items. (отображается 20 000 заявок). Рост HeapMemoryUsage до 80 МБ.
Причем, реакция на каждый вызов разная: либо резкий рост, либо резкое падение HeapMemoryUsage.
После экспериментов с 1. Show all items по диспетчеру задач Windows программа потребляет уже ~183 - 188МБ.
Как ни странно через вызовы 1. Show all items. можно погасить HeapMemoryUsage("утечки").

3.0)Из java -XX:+PrintFlagsFinal -version
4МБ-    size_t MarkStackSize                            = 4194304                                   {product} {ergonomic}
512МБ   size_t MarkStackSizeMax                         = 536870912                                 {product} {default}

3.1)Срез по jconsole
Time: 
2024-09-14 21:43:55
Used: 
    44 278 kbytes
Committed: 
   151 552 kbytes
Max: 
 4 151 296 kbytes
GC time: 
 0,045 seconds on G1 Young Generation (22 collections)

 0,004 seconds on G1 Old Generation (1 collections)

3.2)Срез по jhsdb jmap --heap --pid 5640
G1 Young + OLD Generation(capacity) = 88 + 6 + 54 = 148МБ. Бьётся с Committed: 151 552 kbytes(по jconsole).
MetaspaceSize = 21МБ.
Вероятно ещё ~20МБ под стек.

Heap Configuration:
   MinHeapFreeRatio         = 40
   MaxHeapFreeRatio         = 70
   MaxHeapSize              = 4250927104 (4054.0MB)
   NewSize                  = 1363144 (1.2999954223632812MB)
   MaxNewSize               = 2550136832 (2432.0MB)
   OldSize                  = 5452592 (5.1999969482421875MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 22020096 (21.0MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 2097152 (2.0MB)

Heap Usage:
G1 Heap:
   regions  = 2027
   capacity = 4250927104 (4054.0MB)
   used     = 47438728 (45.24109649658203MB)
   free     = 4203488376 (4008.758903503418MB)
   1.1159619264080423% used
G1 Young Generation:
Eden Space:
   regions  = 12
   capacity = 92274688 (88.0MB)
   used     = 25165824 (24.0MB)
   free     = 67108864 (64.0MB)
   27.272727272727273% used
Survivor Space:
   regions  = 2
   capacity = 6291456 (6.0MB)
   used     = 6017904 (5.7391204833984375MB)
   free     = 273552 (0.2608795166015625MB)
   95.65200805664062% used
G1 Old Generation:
   regions  = 9
   capacity = 56623104 (54.0MB)
   used     = 16255000 (15.501976013183594MB)
   free     = 40368104 (38.498023986816406MB)
   28.707362987377024% used
   
4)Установил -Xmx40m -Xms40m.
Несколько вызовов 1. Show all items не позволили HeapMemoryUsage подняться выше 30МБ.
Добавил ещё 10000 заявок. ещё раз несколько раз вызвал 1. Show all items. HeapMemoryUsage не превысил 30МБ.
Видимо, Java, как-то "понимает" сколько у неё памяти на приложение и пытается "уложиться" в заданные параметры.
HeapMemoryUsage = в целом, также медленно растёт, и резко падает.

5)Установил -Xmx20m -Xms20m. 
Несколько вызовов 1. Show all items не позволили HeapMemoryUsage подняться выше 20МБ.

6)Установил -Xmx10m -Xms10m. 
После первого вызовы 1. Show all items - программа остановилась с ошибкой 
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space.

